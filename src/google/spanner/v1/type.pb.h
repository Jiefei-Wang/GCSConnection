// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/spanner/v1/type.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fspanner_2fv1_2ftype_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fspanner_2fv1_2ftype_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fspanner_2fv1_2ftype_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fspanner_2fv1_2ftype_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fspanner_2fv1_2ftype_2eproto;
namespace google {
namespace spanner {
namespace v1 {
class StructType;
class StructTypeDefaultTypeInternal;
extern StructTypeDefaultTypeInternal _StructType_default_instance_;
class StructType_Field;
class StructType_FieldDefaultTypeInternal;
extern StructType_FieldDefaultTypeInternal _StructType_Field_default_instance_;
class Type;
class TypeDefaultTypeInternal;
extern TypeDefaultTypeInternal _Type_default_instance_;
}  // namespace v1
}  // namespace spanner
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::spanner::v1::StructType* Arena::CreateMaybeMessage<::google::spanner::v1::StructType>(Arena*);
template<> ::google::spanner::v1::StructType_Field* Arena::CreateMaybeMessage<::google::spanner::v1::StructType_Field>(Arena*);
template<> ::google::spanner::v1::Type* Arena::CreateMaybeMessage<::google::spanner::v1::Type>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace spanner {
namespace v1 {

enum TypeCode : int {
  TYPE_CODE_UNSPECIFIED = 0,
  BOOL = 1,
  INT64 = 2,
  FLOAT64 = 3,
  TIMESTAMP = 4,
  DATE = 5,
  STRING = 6,
  BYTES = 7,
  ARRAY = 8,
  STRUCT = 9,
  TypeCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TypeCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TypeCode_IsValid(int value);
constexpr TypeCode TypeCode_MIN = TYPE_CODE_UNSPECIFIED;
constexpr TypeCode TypeCode_MAX = STRUCT;
constexpr int TypeCode_ARRAYSIZE = TypeCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TypeCode_descriptor();
template<typename T>
inline const std::string& TypeCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TypeCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TypeCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TypeCode_descriptor(), enum_t_value);
}
inline bool TypeCode_Parse(
    const std::string& name, TypeCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TypeCode>(
    TypeCode_descriptor(), name, value);
}
// ===================================================================

class Type :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.v1.Type) */ {
 public:
  Type();
  virtual ~Type();

  Type(const Type& from);
  Type(Type&& from) noexcept
    : Type() {
    *this = ::std::move(from);
  }

  inline Type& operator=(const Type& from) {
    CopyFrom(from);
    return *this;
  }
  inline Type& operator=(Type&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Type& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Type* internal_default_instance() {
    return reinterpret_cast<const Type*>(
               &_Type_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Type& a, Type& b) {
    a.Swap(&b);
  }
  inline void Swap(Type* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Type* New() const final {
    return CreateMaybeMessage<Type>(nullptr);
  }

  Type* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Type>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Type& from);
  void MergeFrom(const Type& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Type* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.v1.Type";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fspanner_2fv1_2ftype_2eproto);
    return ::descriptor_table_google_2fspanner_2fv1_2ftype_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrayElementTypeFieldNumber = 2,
    kStructTypeFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // .google.spanner.v1.Type array_element_type = 2;
  bool has_array_element_type() const;
  private:
  bool _internal_has_array_element_type() const;
  public:
  void clear_array_element_type();
  const ::google::spanner::v1::Type& array_element_type() const;
  ::google::spanner::v1::Type* release_array_element_type();
  ::google::spanner::v1::Type* mutable_array_element_type();
  void set_allocated_array_element_type(::google::spanner::v1::Type* array_element_type);
  private:
  const ::google::spanner::v1::Type& _internal_array_element_type() const;
  ::google::spanner::v1::Type* _internal_mutable_array_element_type();
  public:

  // .google.spanner.v1.StructType struct_type = 3;
  bool has_struct_type() const;
  private:
  bool _internal_has_struct_type() const;
  public:
  void clear_struct_type();
  const ::google::spanner::v1::StructType& struct_type() const;
  ::google::spanner::v1::StructType* release_struct_type();
  ::google::spanner::v1::StructType* mutable_struct_type();
  void set_allocated_struct_type(::google::spanner::v1::StructType* struct_type);
  private:
  const ::google::spanner::v1::StructType& _internal_struct_type() const;
  ::google::spanner::v1::StructType* _internal_mutable_struct_type();
  public:

  // .google.spanner.v1.TypeCode code = 1;
  void clear_code();
  ::google::spanner::v1::TypeCode code() const;
  void set_code(::google::spanner::v1::TypeCode value);
  private:
  ::google::spanner::v1::TypeCode _internal_code() const;
  void _internal_set_code(::google::spanner::v1::TypeCode value);
  public:

  // @@protoc_insertion_point(class_scope:google.spanner.v1.Type)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::spanner::v1::Type* array_element_type_;
  ::google::spanner::v1::StructType* struct_type_;
  int code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fv1_2ftype_2eproto;
};
// -------------------------------------------------------------------

class StructType_Field :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.v1.StructType.Field) */ {
 public:
  StructType_Field();
  virtual ~StructType_Field();

  StructType_Field(const StructType_Field& from);
  StructType_Field(StructType_Field&& from) noexcept
    : StructType_Field() {
    *this = ::std::move(from);
  }

  inline StructType_Field& operator=(const StructType_Field& from) {
    CopyFrom(from);
    return *this;
  }
  inline StructType_Field& operator=(StructType_Field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StructType_Field& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StructType_Field* internal_default_instance() {
    return reinterpret_cast<const StructType_Field*>(
               &_StructType_Field_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StructType_Field& a, StructType_Field& b) {
    a.Swap(&b);
  }
  inline void Swap(StructType_Field* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StructType_Field* New() const final {
    return CreateMaybeMessage<StructType_Field>(nullptr);
  }

  StructType_Field* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StructType_Field>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StructType_Field& from);
  void MergeFrom(const StructType_Field& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StructType_Field* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.v1.StructType.Field";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fspanner_2fv1_2ftype_2eproto);
    return ::descriptor_table_google_2fspanner_2fv1_2ftype_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.spanner.v1.Type type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::google::spanner::v1::Type& type() const;
  ::google::spanner::v1::Type* release_type();
  ::google::spanner::v1::Type* mutable_type();
  void set_allocated_type(::google::spanner::v1::Type* type);
  private:
  const ::google::spanner::v1::Type& _internal_type() const;
  ::google::spanner::v1::Type* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:google.spanner.v1.StructType.Field)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::google::spanner::v1::Type* type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fv1_2ftype_2eproto;
};
// -------------------------------------------------------------------

class StructType :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.v1.StructType) */ {
 public:
  StructType();
  virtual ~StructType();

  StructType(const StructType& from);
  StructType(StructType&& from) noexcept
    : StructType() {
    *this = ::std::move(from);
  }

  inline StructType& operator=(const StructType& from) {
    CopyFrom(from);
    return *this;
  }
  inline StructType& operator=(StructType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StructType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StructType* internal_default_instance() {
    return reinterpret_cast<const StructType*>(
               &_StructType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StructType& a, StructType& b) {
    a.Swap(&b);
  }
  inline void Swap(StructType* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StructType* New() const final {
    return CreateMaybeMessage<StructType>(nullptr);
  }

  StructType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StructType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StructType& from);
  void MergeFrom(const StructType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StructType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.v1.StructType";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fspanner_2fv1_2ftype_2eproto);
    return ::descriptor_table_google_2fspanner_2fv1_2ftype_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef StructType_Field Field;

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 1,
  };
  // repeated .google.spanner.v1.StructType.Field fields = 1;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  ::google::spanner::v1::StructType_Field* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::v1::StructType_Field >*
      mutable_fields();
  private:
  const ::google::spanner::v1::StructType_Field& _internal_fields(int index) const;
  ::google::spanner::v1::StructType_Field* _internal_add_fields();
  public:
  const ::google::spanner::v1::StructType_Field& fields(int index) const;
  ::google::spanner::v1::StructType_Field* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::v1::StructType_Field >&
      fields() const;

  // @@protoc_insertion_point(class_scope:google.spanner.v1.StructType)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::v1::StructType_Field > fields_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fv1_2ftype_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Type

// .google.spanner.v1.TypeCode code = 1;
inline void Type::clear_code() {
  code_ = 0;
}
inline ::google::spanner::v1::TypeCode Type::_internal_code() const {
  return static_cast< ::google::spanner::v1::TypeCode >(code_);
}
inline ::google::spanner::v1::TypeCode Type::code() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.Type.code)
  return _internal_code();
}
inline void Type::_internal_set_code(::google::spanner::v1::TypeCode value) {
  
  code_ = value;
}
inline void Type::set_code(::google::spanner::v1::TypeCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:google.spanner.v1.Type.code)
}

// .google.spanner.v1.Type array_element_type = 2;
inline bool Type::_internal_has_array_element_type() const {
  return this != internal_default_instance() && array_element_type_ != nullptr;
}
inline bool Type::has_array_element_type() const {
  return _internal_has_array_element_type();
}
inline void Type::clear_array_element_type() {
  if (GetArenaNoVirtual() == nullptr && array_element_type_ != nullptr) {
    delete array_element_type_;
  }
  array_element_type_ = nullptr;
}
inline const ::google::spanner::v1::Type& Type::_internal_array_element_type() const {
  const ::google::spanner::v1::Type* p = array_element_type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::google::spanner::v1::Type*>(
      &::google::spanner::v1::_Type_default_instance_);
}
inline const ::google::spanner::v1::Type& Type::array_element_type() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.Type.array_element_type)
  return _internal_array_element_type();
}
inline ::google::spanner::v1::Type* Type::release_array_element_type() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.Type.array_element_type)
  
  ::google::spanner::v1::Type* temp = array_element_type_;
  array_element_type_ = nullptr;
  return temp;
}
inline ::google::spanner::v1::Type* Type::_internal_mutable_array_element_type() {
  
  if (array_element_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::spanner::v1::Type>(GetArenaNoVirtual());
    array_element_type_ = p;
  }
  return array_element_type_;
}
inline ::google::spanner::v1::Type* Type::mutable_array_element_type() {
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.Type.array_element_type)
  return _internal_mutable_array_element_type();
}
inline void Type::set_allocated_array_element_type(::google::spanner::v1::Type* array_element_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete array_element_type_;
  }
  if (array_element_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      array_element_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, array_element_type, submessage_arena);
    }
    
  } else {
    
  }
  array_element_type_ = array_element_type;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.Type.array_element_type)
}

// .google.spanner.v1.StructType struct_type = 3;
inline bool Type::_internal_has_struct_type() const {
  return this != internal_default_instance() && struct_type_ != nullptr;
}
inline bool Type::has_struct_type() const {
  return _internal_has_struct_type();
}
inline void Type::clear_struct_type() {
  if (GetArenaNoVirtual() == nullptr && struct_type_ != nullptr) {
    delete struct_type_;
  }
  struct_type_ = nullptr;
}
inline const ::google::spanner::v1::StructType& Type::_internal_struct_type() const {
  const ::google::spanner::v1::StructType* p = struct_type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::google::spanner::v1::StructType*>(
      &::google::spanner::v1::_StructType_default_instance_);
}
inline const ::google::spanner::v1::StructType& Type::struct_type() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.Type.struct_type)
  return _internal_struct_type();
}
inline ::google::spanner::v1::StructType* Type::release_struct_type() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.Type.struct_type)
  
  ::google::spanner::v1::StructType* temp = struct_type_;
  struct_type_ = nullptr;
  return temp;
}
inline ::google::spanner::v1::StructType* Type::_internal_mutable_struct_type() {
  
  if (struct_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::spanner::v1::StructType>(GetArenaNoVirtual());
    struct_type_ = p;
  }
  return struct_type_;
}
inline ::google::spanner::v1::StructType* Type::mutable_struct_type() {
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.Type.struct_type)
  return _internal_mutable_struct_type();
}
inline void Type::set_allocated_struct_type(::google::spanner::v1::StructType* struct_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete struct_type_;
  }
  if (struct_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      struct_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, struct_type, submessage_arena);
    }
    
  } else {
    
  }
  struct_type_ = struct_type;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.Type.struct_type)
}

// -------------------------------------------------------------------

// StructType_Field

// string name = 1;
inline void StructType_Field::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StructType_Field::name() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.StructType.Field.name)
  return _internal_name();
}
inline void StructType_Field::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.spanner.v1.StructType.Field.name)
}
inline std::string* StructType_Field::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.StructType.Field.name)
  return _internal_mutable_name();
}
inline const std::string& StructType_Field::_internal_name() const {
  return name_.GetNoArena();
}
inline void StructType_Field::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StructType_Field::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.v1.StructType.Field.name)
}
inline void StructType_Field::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.v1.StructType.Field.name)
}
inline void StructType_Field::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.v1.StructType.Field.name)
}
inline std::string* StructType_Field::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StructType_Field::release_name() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.StructType.Field.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StructType_Field::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.StructType.Field.name)
}

// .google.spanner.v1.Type type = 2;
inline bool StructType_Field::_internal_has_type() const {
  return this != internal_default_instance() && type_ != nullptr;
}
inline bool StructType_Field::has_type() const {
  return _internal_has_type();
}
inline void StructType_Field::clear_type() {
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
}
inline const ::google::spanner::v1::Type& StructType_Field::_internal_type() const {
  const ::google::spanner::v1::Type* p = type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::google::spanner::v1::Type*>(
      &::google::spanner::v1::_Type_default_instance_);
}
inline const ::google::spanner::v1::Type& StructType_Field::type() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.StructType.Field.type)
  return _internal_type();
}
inline ::google::spanner::v1::Type* StructType_Field::release_type() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.StructType.Field.type)
  
  ::google::spanner::v1::Type* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::google::spanner::v1::Type* StructType_Field::_internal_mutable_type() {
  
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::spanner::v1::Type>(GetArenaNoVirtual());
    type_ = p;
  }
  return type_;
}
inline ::google::spanner::v1::Type* StructType_Field::mutable_type() {
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.StructType.Field.type)
  return _internal_mutable_type();
}
inline void StructType_Field::set_allocated_type(::google::spanner::v1::Type* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete type_;
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.StructType.Field.type)
}

// -------------------------------------------------------------------

// StructType

// repeated .google.spanner.v1.StructType.Field fields = 1;
inline int StructType::_internal_fields_size() const {
  return fields_.size();
}
inline int StructType::fields_size() const {
  return _internal_fields_size();
}
inline void StructType::clear_fields() {
  fields_.Clear();
}
inline ::google::spanner::v1::StructType_Field* StructType::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.StructType.fields)
  return fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::v1::StructType_Field >*
StructType::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.v1.StructType.fields)
  return &fields_;
}
inline const ::google::spanner::v1::StructType_Field& StructType::_internal_fields(int index) const {
  return fields_.Get(index);
}
inline const ::google::spanner::v1::StructType_Field& StructType::fields(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.StructType.fields)
  return _internal_fields(index);
}
inline ::google::spanner::v1::StructType_Field* StructType::_internal_add_fields() {
  return fields_.Add();
}
inline ::google::spanner::v1::StructType_Field* StructType::add_fields() {
  // @@protoc_insertion_point(field_add:google.spanner.v1.StructType.fields)
  return _internal_add_fields();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::v1::StructType_Field >&
StructType::fields() const {
  // @@protoc_insertion_point(field_list:google.spanner.v1.StructType.fields)
  return fields_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace spanner
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::spanner::v1::TypeCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::spanner::v1::TypeCode>() {
  return ::google::spanner::v1::TypeCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fspanner_2fv1_2ftype_2eproto
