// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/spanner/admin/database/v1/spanner_database_admin.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/iam/v1/iam_policy.pb.h"
#include "google/iam/v1/policy.pb.h"
#include "google/longrunning/operations.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto;
namespace google {
namespace spanner {
namespace admin {
namespace database {
namespace v1 {
class CreateDatabaseMetadata;
class CreateDatabaseMetadataDefaultTypeInternal;
extern CreateDatabaseMetadataDefaultTypeInternal _CreateDatabaseMetadata_default_instance_;
class CreateDatabaseRequest;
class CreateDatabaseRequestDefaultTypeInternal;
extern CreateDatabaseRequestDefaultTypeInternal _CreateDatabaseRequest_default_instance_;
class Database;
class DatabaseDefaultTypeInternal;
extern DatabaseDefaultTypeInternal _Database_default_instance_;
class DropDatabaseRequest;
class DropDatabaseRequestDefaultTypeInternal;
extern DropDatabaseRequestDefaultTypeInternal _DropDatabaseRequest_default_instance_;
class GetDatabaseDdlRequest;
class GetDatabaseDdlRequestDefaultTypeInternal;
extern GetDatabaseDdlRequestDefaultTypeInternal _GetDatabaseDdlRequest_default_instance_;
class GetDatabaseDdlResponse;
class GetDatabaseDdlResponseDefaultTypeInternal;
extern GetDatabaseDdlResponseDefaultTypeInternal _GetDatabaseDdlResponse_default_instance_;
class GetDatabaseRequest;
class GetDatabaseRequestDefaultTypeInternal;
extern GetDatabaseRequestDefaultTypeInternal _GetDatabaseRequest_default_instance_;
class ListDatabasesRequest;
class ListDatabasesRequestDefaultTypeInternal;
extern ListDatabasesRequestDefaultTypeInternal _ListDatabasesRequest_default_instance_;
class ListDatabasesResponse;
class ListDatabasesResponseDefaultTypeInternal;
extern ListDatabasesResponseDefaultTypeInternal _ListDatabasesResponse_default_instance_;
class UpdateDatabaseDdlMetadata;
class UpdateDatabaseDdlMetadataDefaultTypeInternal;
extern UpdateDatabaseDdlMetadataDefaultTypeInternal _UpdateDatabaseDdlMetadata_default_instance_;
class UpdateDatabaseDdlRequest;
class UpdateDatabaseDdlRequestDefaultTypeInternal;
extern UpdateDatabaseDdlRequestDefaultTypeInternal _UpdateDatabaseDdlRequest_default_instance_;
}  // namespace v1
}  // namespace database
}  // namespace admin
}  // namespace spanner
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::spanner::admin::database::v1::CreateDatabaseMetadata* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::CreateDatabaseMetadata>(Arena*);
template<> ::google::spanner::admin::database::v1::CreateDatabaseRequest* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::CreateDatabaseRequest>(Arena*);
template<> ::google::spanner::admin::database::v1::Database* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::Database>(Arena*);
template<> ::google::spanner::admin::database::v1::DropDatabaseRequest* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::DropDatabaseRequest>(Arena*);
template<> ::google::spanner::admin::database::v1::GetDatabaseDdlRequest* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::GetDatabaseDdlRequest>(Arena*);
template<> ::google::spanner::admin::database::v1::GetDatabaseDdlResponse* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::GetDatabaseDdlResponse>(Arena*);
template<> ::google::spanner::admin::database::v1::GetDatabaseRequest* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::GetDatabaseRequest>(Arena*);
template<> ::google::spanner::admin::database::v1::ListDatabasesRequest* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::ListDatabasesRequest>(Arena*);
template<> ::google::spanner::admin::database::v1::ListDatabasesResponse* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::ListDatabasesResponse>(Arena*);
template<> ::google::spanner::admin::database::v1::UpdateDatabaseDdlMetadata* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::UpdateDatabaseDdlMetadata>(Arena*);
template<> ::google::spanner::admin::database::v1::UpdateDatabaseDdlRequest* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::UpdateDatabaseDdlRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace spanner {
namespace admin {
namespace database {
namespace v1 {

enum Database_State : int {
  Database_State_STATE_UNSPECIFIED = 0,
  Database_State_CREATING = 1,
  Database_State_READY = 2,
  Database_State_Database_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Database_State_Database_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Database_State_IsValid(int value);
constexpr Database_State Database_State_State_MIN = Database_State_STATE_UNSPECIFIED;
constexpr Database_State Database_State_State_MAX = Database_State_READY;
constexpr int Database_State_State_ARRAYSIZE = Database_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Database_State_descriptor();
template<typename T>
inline const std::string& Database_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Database_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Database_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Database_State_descriptor(), enum_t_value);
}
inline bool Database_State_Parse(
    const std::string& name, Database_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Database_State>(
    Database_State_descriptor(), name, value);
}
// ===================================================================

class Database :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.Database) */ {
 public:
  Database();
  virtual ~Database();

  Database(const Database& from);
  Database(Database&& from) noexcept
    : Database() {
    *this = ::std::move(from);
  }

  inline Database& operator=(const Database& from) {
    CopyFrom(from);
    return *this;
  }
  inline Database& operator=(Database&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Database& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Database* internal_default_instance() {
    return reinterpret_cast<const Database*>(
               &_Database_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Database& a, Database& b) {
    a.Swap(&b);
  }
  inline void Swap(Database* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Database* New() const final {
    return CreateMaybeMessage<Database>(nullptr);
  }

  Database* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Database>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Database& from);
  void MergeFrom(const Database& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Database* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.Database";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto);
    return ::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Database_State State;
  static constexpr State STATE_UNSPECIFIED =
    Database_State_STATE_UNSPECIFIED;
  static constexpr State CREATING =
    Database_State_CREATING;
  static constexpr State READY =
    Database_State_READY;
  static inline bool State_IsValid(int value) {
    return Database_State_IsValid(value);
  }
  static constexpr State State_MIN =
    Database_State_State_MIN;
  static constexpr State State_MAX =
    Database_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    Database_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return Database_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return Database_State_Name(enum_t_value);
  }
  static inline bool State_Parse(const std::string& name,
      State* value) {
    return Database_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.spanner.admin.database.v1.Database.State state = 2;
  void clear_state();
  ::google::spanner::admin::database::v1::Database_State state() const;
  void set_state(::google::spanner::admin::database::v1::Database_State value);
  private:
  ::google::spanner::admin::database::v1::Database_State _internal_state() const;
  void _internal_set_state(::google::spanner::admin::database::v1::Database_State value);
  public:

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.Database)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class ListDatabasesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.ListDatabasesRequest) */ {
 public:
  ListDatabasesRequest();
  virtual ~ListDatabasesRequest();

  ListDatabasesRequest(const ListDatabasesRequest& from);
  ListDatabasesRequest(ListDatabasesRequest&& from) noexcept
    : ListDatabasesRequest() {
    *this = ::std::move(from);
  }

  inline ListDatabasesRequest& operator=(const ListDatabasesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDatabasesRequest& operator=(ListDatabasesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDatabasesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListDatabasesRequest* internal_default_instance() {
    return reinterpret_cast<const ListDatabasesRequest*>(
               &_ListDatabasesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListDatabasesRequest& a, ListDatabasesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDatabasesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDatabasesRequest* New() const final {
    return CreateMaybeMessage<ListDatabasesRequest>(nullptr);
  }

  ListDatabasesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDatabasesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDatabasesRequest& from);
  void MergeFrom(const ListDatabasesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDatabasesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.ListDatabasesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto);
    return ::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 4,
    kPageSizeFieldNumber = 3,
  };
  // string parent = 1;
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 4;
  void clear_page_token();
  const std::string& page_token() const;
  void set_page_token(const std::string& value);
  void set_page_token(std::string&& value);
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  std::string* mutable_page_token();
  std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 3;
  void clear_page_size();
  ::PROTOBUF_NAMESPACE_ID::int32 page_size() const;
  void set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_size() const;
  void _internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.ListDatabasesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class ListDatabasesResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.ListDatabasesResponse) */ {
 public:
  ListDatabasesResponse();
  virtual ~ListDatabasesResponse();

  ListDatabasesResponse(const ListDatabasesResponse& from);
  ListDatabasesResponse(ListDatabasesResponse&& from) noexcept
    : ListDatabasesResponse() {
    *this = ::std::move(from);
  }

  inline ListDatabasesResponse& operator=(const ListDatabasesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDatabasesResponse& operator=(ListDatabasesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDatabasesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListDatabasesResponse* internal_default_instance() {
    return reinterpret_cast<const ListDatabasesResponse*>(
               &_ListDatabasesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListDatabasesResponse& a, ListDatabasesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDatabasesResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDatabasesResponse* New() const final {
    return CreateMaybeMessage<ListDatabasesResponse>(nullptr);
  }

  ListDatabasesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDatabasesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDatabasesResponse& from);
  void MergeFrom(const ListDatabasesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDatabasesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.ListDatabasesResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto);
    return ::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatabasesFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.spanner.admin.database.v1.Database databases = 1;
  int databases_size() const;
  private:
  int _internal_databases_size() const;
  public:
  void clear_databases();
  ::google::spanner::admin::database::v1::Database* mutable_databases(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::admin::database::v1::Database >*
      mutable_databases();
  private:
  const ::google::spanner::admin::database::v1::Database& _internal_databases(int index) const;
  ::google::spanner::admin::database::v1::Database* _internal_add_databases();
  public:
  const ::google::spanner::admin::database::v1::Database& databases(int index) const;
  ::google::spanner::admin::database::v1::Database* add_databases();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::admin::database::v1::Database >&
      databases() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  void set_next_page_token(const std::string& value);
  void set_next_page_token(std::string&& value);
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  std::string* mutable_next_page_token();
  std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.ListDatabasesResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::admin::database::v1::Database > databases_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class CreateDatabaseRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.CreateDatabaseRequest) */ {
 public:
  CreateDatabaseRequest();
  virtual ~CreateDatabaseRequest();

  CreateDatabaseRequest(const CreateDatabaseRequest& from);
  CreateDatabaseRequest(CreateDatabaseRequest&& from) noexcept
    : CreateDatabaseRequest() {
    *this = ::std::move(from);
  }

  inline CreateDatabaseRequest& operator=(const CreateDatabaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateDatabaseRequest& operator=(CreateDatabaseRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateDatabaseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateDatabaseRequest* internal_default_instance() {
    return reinterpret_cast<const CreateDatabaseRequest*>(
               &_CreateDatabaseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateDatabaseRequest& a, CreateDatabaseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateDatabaseRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateDatabaseRequest* New() const final {
    return CreateMaybeMessage<CreateDatabaseRequest>(nullptr);
  }

  CreateDatabaseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateDatabaseRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateDatabaseRequest& from);
  void MergeFrom(const CreateDatabaseRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDatabaseRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.CreateDatabaseRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto);
    return ::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraStatementsFieldNumber = 3,
    kParentFieldNumber = 1,
    kCreateStatementFieldNumber = 2,
  };
  // repeated string extra_statements = 3;
  int extra_statements_size() const;
  private:
  int _internal_extra_statements_size() const;
  public:
  void clear_extra_statements();
  const std::string& extra_statements(int index) const;
  std::string* mutable_extra_statements(int index);
  void set_extra_statements(int index, const std::string& value);
  void set_extra_statements(int index, std::string&& value);
  void set_extra_statements(int index, const char* value);
  void set_extra_statements(int index, const char* value, size_t size);
  std::string* add_extra_statements();
  void add_extra_statements(const std::string& value);
  void add_extra_statements(std::string&& value);
  void add_extra_statements(const char* value);
  void add_extra_statements(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& extra_statements() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_extra_statements();
  private:
  const std::string& _internal_extra_statements(int index) const;
  std::string* _internal_add_extra_statements();
  public:

  // string parent = 1;
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string create_statement = 2;
  void clear_create_statement();
  const std::string& create_statement() const;
  void set_create_statement(const std::string& value);
  void set_create_statement(std::string&& value);
  void set_create_statement(const char* value);
  void set_create_statement(const char* value, size_t size);
  std::string* mutable_create_statement();
  std::string* release_create_statement();
  void set_allocated_create_statement(std::string* create_statement);
  private:
  const std::string& _internal_create_statement() const;
  void _internal_set_create_statement(const std::string& value);
  std::string* _internal_mutable_create_statement();
  public:

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.CreateDatabaseRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> extra_statements_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr create_statement_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class CreateDatabaseMetadata :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.CreateDatabaseMetadata) */ {
 public:
  CreateDatabaseMetadata();
  virtual ~CreateDatabaseMetadata();

  CreateDatabaseMetadata(const CreateDatabaseMetadata& from);
  CreateDatabaseMetadata(CreateDatabaseMetadata&& from) noexcept
    : CreateDatabaseMetadata() {
    *this = ::std::move(from);
  }

  inline CreateDatabaseMetadata& operator=(const CreateDatabaseMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateDatabaseMetadata& operator=(CreateDatabaseMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateDatabaseMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateDatabaseMetadata* internal_default_instance() {
    return reinterpret_cast<const CreateDatabaseMetadata*>(
               &_CreateDatabaseMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreateDatabaseMetadata& a, CreateDatabaseMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateDatabaseMetadata* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateDatabaseMetadata* New() const final {
    return CreateMaybeMessage<CreateDatabaseMetadata>(nullptr);
  }

  CreateDatabaseMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateDatabaseMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateDatabaseMetadata& from);
  void MergeFrom(const CreateDatabaseMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDatabaseMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.CreateDatabaseMetadata";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto);
    return ::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatabaseFieldNumber = 1,
  };
  // string database = 1;
  void clear_database();
  const std::string& database() const;
  void set_database(const std::string& value);
  void set_database(std::string&& value);
  void set_database(const char* value);
  void set_database(const char* value, size_t size);
  std::string* mutable_database();
  std::string* release_database();
  void set_allocated_database(std::string* database);
  private:
  const std::string& _internal_database() const;
  void _internal_set_database(const std::string& value);
  std::string* _internal_mutable_database();
  public:

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.CreateDatabaseMetadata)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetDatabaseRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.GetDatabaseRequest) */ {
 public:
  GetDatabaseRequest();
  virtual ~GetDatabaseRequest();

  GetDatabaseRequest(const GetDatabaseRequest& from);
  GetDatabaseRequest(GetDatabaseRequest&& from) noexcept
    : GetDatabaseRequest() {
    *this = ::std::move(from);
  }

  inline GetDatabaseRequest& operator=(const GetDatabaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDatabaseRequest& operator=(GetDatabaseRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDatabaseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDatabaseRequest* internal_default_instance() {
    return reinterpret_cast<const GetDatabaseRequest*>(
               &_GetDatabaseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetDatabaseRequest& a, GetDatabaseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDatabaseRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDatabaseRequest* New() const final {
    return CreateMaybeMessage<GetDatabaseRequest>(nullptr);
  }

  GetDatabaseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDatabaseRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDatabaseRequest& from);
  void MergeFrom(const GetDatabaseRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDatabaseRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.GetDatabaseRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto);
    return ::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.GetDatabaseRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class UpdateDatabaseDdlRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest) */ {
 public:
  UpdateDatabaseDdlRequest();
  virtual ~UpdateDatabaseDdlRequest();

  UpdateDatabaseDdlRequest(const UpdateDatabaseDdlRequest& from);
  UpdateDatabaseDdlRequest(UpdateDatabaseDdlRequest&& from) noexcept
    : UpdateDatabaseDdlRequest() {
    *this = ::std::move(from);
  }

  inline UpdateDatabaseDdlRequest& operator=(const UpdateDatabaseDdlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateDatabaseDdlRequest& operator=(UpdateDatabaseDdlRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateDatabaseDdlRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateDatabaseDdlRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateDatabaseDdlRequest*>(
               &_UpdateDatabaseDdlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UpdateDatabaseDdlRequest& a, UpdateDatabaseDdlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateDatabaseDdlRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateDatabaseDdlRequest* New() const final {
    return CreateMaybeMessage<UpdateDatabaseDdlRequest>(nullptr);
  }

  UpdateDatabaseDdlRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateDatabaseDdlRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateDatabaseDdlRequest& from);
  void MergeFrom(const UpdateDatabaseDdlRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateDatabaseDdlRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.UpdateDatabaseDdlRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto);
    return ::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatementsFieldNumber = 2,
    kDatabaseFieldNumber = 1,
    kOperationIdFieldNumber = 3,
  };
  // repeated string statements = 2;
  int statements_size() const;
  private:
  int _internal_statements_size() const;
  public:
  void clear_statements();
  const std::string& statements(int index) const;
  std::string* mutable_statements(int index);
  void set_statements(int index, const std::string& value);
  void set_statements(int index, std::string&& value);
  void set_statements(int index, const char* value);
  void set_statements(int index, const char* value, size_t size);
  std::string* add_statements();
  void add_statements(const std::string& value);
  void add_statements(std::string&& value);
  void add_statements(const char* value);
  void add_statements(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& statements() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_statements();
  private:
  const std::string& _internal_statements(int index) const;
  std::string* _internal_add_statements();
  public:

  // string database = 1;
  void clear_database();
  const std::string& database() const;
  void set_database(const std::string& value);
  void set_database(std::string&& value);
  void set_database(const char* value);
  void set_database(const char* value, size_t size);
  std::string* mutable_database();
  std::string* release_database();
  void set_allocated_database(std::string* database);
  private:
  const std::string& _internal_database() const;
  void _internal_set_database(const std::string& value);
  std::string* _internal_mutable_database();
  public:

  // string operation_id = 3;
  void clear_operation_id();
  const std::string& operation_id() const;
  void set_operation_id(const std::string& value);
  void set_operation_id(std::string&& value);
  void set_operation_id(const char* value);
  void set_operation_id(const char* value, size_t size);
  std::string* mutable_operation_id();
  std::string* release_operation_id();
  void set_allocated_operation_id(std::string* operation_id);
  private:
  const std::string& _internal_operation_id() const;
  void _internal_set_operation_id(const std::string& value);
  std::string* _internal_mutable_operation_id();
  public:

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> statements_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operation_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class UpdateDatabaseDdlMetadata :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata) */ {
 public:
  UpdateDatabaseDdlMetadata();
  virtual ~UpdateDatabaseDdlMetadata();

  UpdateDatabaseDdlMetadata(const UpdateDatabaseDdlMetadata& from);
  UpdateDatabaseDdlMetadata(UpdateDatabaseDdlMetadata&& from) noexcept
    : UpdateDatabaseDdlMetadata() {
    *this = ::std::move(from);
  }

  inline UpdateDatabaseDdlMetadata& operator=(const UpdateDatabaseDdlMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateDatabaseDdlMetadata& operator=(UpdateDatabaseDdlMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateDatabaseDdlMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateDatabaseDdlMetadata* internal_default_instance() {
    return reinterpret_cast<const UpdateDatabaseDdlMetadata*>(
               &_UpdateDatabaseDdlMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UpdateDatabaseDdlMetadata& a, UpdateDatabaseDdlMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateDatabaseDdlMetadata* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateDatabaseDdlMetadata* New() const final {
    return CreateMaybeMessage<UpdateDatabaseDdlMetadata>(nullptr);
  }

  UpdateDatabaseDdlMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateDatabaseDdlMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateDatabaseDdlMetadata& from);
  void MergeFrom(const UpdateDatabaseDdlMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateDatabaseDdlMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto);
    return ::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatementsFieldNumber = 2,
    kCommitTimestampsFieldNumber = 3,
    kDatabaseFieldNumber = 1,
  };
  // repeated string statements = 2;
  int statements_size() const;
  private:
  int _internal_statements_size() const;
  public:
  void clear_statements();
  const std::string& statements(int index) const;
  std::string* mutable_statements(int index);
  void set_statements(int index, const std::string& value);
  void set_statements(int index, std::string&& value);
  void set_statements(int index, const char* value);
  void set_statements(int index, const char* value, size_t size);
  std::string* add_statements();
  void add_statements(const std::string& value);
  void add_statements(std::string&& value);
  void add_statements(const char* value);
  void add_statements(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& statements() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_statements();
  private:
  const std::string& _internal_statements(int index) const;
  std::string* _internal_add_statements();
  public:

  // repeated .google.protobuf.Timestamp commit_timestamps = 3;
  int commit_timestamps_size() const;
  private:
  int _internal_commit_timestamps_size() const;
  public:
  void clear_commit_timestamps();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_commit_timestamps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Timestamp >*
      mutable_commit_timestamps();
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_commit_timestamps(int index) const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_add_commit_timestamps();
  public:
  const PROTOBUF_NAMESPACE_ID::Timestamp& commit_timestamps(int index) const;
  PROTOBUF_NAMESPACE_ID::Timestamp* add_commit_timestamps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Timestamp >&
      commit_timestamps() const;

  // string database = 1;
  void clear_database();
  const std::string& database() const;
  void set_database(const std::string& value);
  void set_database(std::string&& value);
  void set_database(const char* value);
  void set_database(const char* value, size_t size);
  std::string* mutable_database();
  std::string* release_database();
  void set_allocated_database(std::string* database);
  private:
  const std::string& _internal_database() const;
  void _internal_set_database(const std::string& value);
  std::string* _internal_mutable_database();
  public:

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> statements_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Timestamp > commit_timestamps_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class DropDatabaseRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.DropDatabaseRequest) */ {
 public:
  DropDatabaseRequest();
  virtual ~DropDatabaseRequest();

  DropDatabaseRequest(const DropDatabaseRequest& from);
  DropDatabaseRequest(DropDatabaseRequest&& from) noexcept
    : DropDatabaseRequest() {
    *this = ::std::move(from);
  }

  inline DropDatabaseRequest& operator=(const DropDatabaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropDatabaseRequest& operator=(DropDatabaseRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DropDatabaseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DropDatabaseRequest* internal_default_instance() {
    return reinterpret_cast<const DropDatabaseRequest*>(
               &_DropDatabaseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DropDatabaseRequest& a, DropDatabaseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DropDatabaseRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DropDatabaseRequest* New() const final {
    return CreateMaybeMessage<DropDatabaseRequest>(nullptr);
  }

  DropDatabaseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DropDatabaseRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DropDatabaseRequest& from);
  void MergeFrom(const DropDatabaseRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropDatabaseRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.DropDatabaseRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto);
    return ::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatabaseFieldNumber = 1,
  };
  // string database = 1;
  void clear_database();
  const std::string& database() const;
  void set_database(const std::string& value);
  void set_database(std::string&& value);
  void set_database(const char* value);
  void set_database(const char* value, size_t size);
  std::string* mutable_database();
  std::string* release_database();
  void set_allocated_database(std::string* database);
  private:
  const std::string& _internal_database() const;
  void _internal_set_database(const std::string& value);
  std::string* _internal_mutable_database();
  public:

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.DropDatabaseRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetDatabaseDdlRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.GetDatabaseDdlRequest) */ {
 public:
  GetDatabaseDdlRequest();
  virtual ~GetDatabaseDdlRequest();

  GetDatabaseDdlRequest(const GetDatabaseDdlRequest& from);
  GetDatabaseDdlRequest(GetDatabaseDdlRequest&& from) noexcept
    : GetDatabaseDdlRequest() {
    *this = ::std::move(from);
  }

  inline GetDatabaseDdlRequest& operator=(const GetDatabaseDdlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDatabaseDdlRequest& operator=(GetDatabaseDdlRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDatabaseDdlRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDatabaseDdlRequest* internal_default_instance() {
    return reinterpret_cast<const GetDatabaseDdlRequest*>(
               &_GetDatabaseDdlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetDatabaseDdlRequest& a, GetDatabaseDdlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDatabaseDdlRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDatabaseDdlRequest* New() const final {
    return CreateMaybeMessage<GetDatabaseDdlRequest>(nullptr);
  }

  GetDatabaseDdlRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDatabaseDdlRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDatabaseDdlRequest& from);
  void MergeFrom(const GetDatabaseDdlRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDatabaseDdlRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.GetDatabaseDdlRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto);
    return ::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatabaseFieldNumber = 1,
  };
  // string database = 1;
  void clear_database();
  const std::string& database() const;
  void set_database(const std::string& value);
  void set_database(std::string&& value);
  void set_database(const char* value);
  void set_database(const char* value, size_t size);
  std::string* mutable_database();
  std::string* release_database();
  void set_allocated_database(std::string* database);
  private:
  const std::string& _internal_database() const;
  void _internal_set_database(const std::string& value);
  std::string* _internal_mutable_database();
  public:

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.GetDatabaseDdlRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetDatabaseDdlResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.GetDatabaseDdlResponse) */ {
 public:
  GetDatabaseDdlResponse();
  virtual ~GetDatabaseDdlResponse();

  GetDatabaseDdlResponse(const GetDatabaseDdlResponse& from);
  GetDatabaseDdlResponse(GetDatabaseDdlResponse&& from) noexcept
    : GetDatabaseDdlResponse() {
    *this = ::std::move(from);
  }

  inline GetDatabaseDdlResponse& operator=(const GetDatabaseDdlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDatabaseDdlResponse& operator=(GetDatabaseDdlResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDatabaseDdlResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDatabaseDdlResponse* internal_default_instance() {
    return reinterpret_cast<const GetDatabaseDdlResponse*>(
               &_GetDatabaseDdlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetDatabaseDdlResponse& a, GetDatabaseDdlResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDatabaseDdlResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDatabaseDdlResponse* New() const final {
    return CreateMaybeMessage<GetDatabaseDdlResponse>(nullptr);
  }

  GetDatabaseDdlResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDatabaseDdlResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDatabaseDdlResponse& from);
  void MergeFrom(const GetDatabaseDdlResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDatabaseDdlResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.GetDatabaseDdlResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto);
    return ::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatementsFieldNumber = 1,
  };
  // repeated string statements = 1;
  int statements_size() const;
  private:
  int _internal_statements_size() const;
  public:
  void clear_statements();
  const std::string& statements(int index) const;
  std::string* mutable_statements(int index);
  void set_statements(int index, const std::string& value);
  void set_statements(int index, std::string&& value);
  void set_statements(int index, const char* value);
  void set_statements(int index, const char* value, size_t size);
  std::string* add_statements();
  void add_statements(const std::string& value);
  void add_statements(std::string&& value);
  void add_statements(const char* value);
  void add_statements(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& statements() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_statements();
  private:
  const std::string& _internal_statements(int index) const;
  std::string* _internal_add_statements();
  public:

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.GetDatabaseDdlResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> statements_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Database

// string name = 1;
inline void Database::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Database::name() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.Database.name)
  return _internal_name();
}
inline void Database::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.Database.name)
}
inline std::string* Database::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.Database.name)
  return _internal_mutable_name();
}
inline const std::string& Database::_internal_name() const {
  return name_.GetNoArena();
}
inline void Database::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Database::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.Database.name)
}
inline void Database::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.Database.name)
}
inline void Database::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.Database.name)
}
inline std::string* Database::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Database::release_name() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.Database.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Database::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.Database.name)
}

// .google.spanner.admin.database.v1.Database.State state = 2;
inline void Database::clear_state() {
  state_ = 0;
}
inline ::google::spanner::admin::database::v1::Database_State Database::_internal_state() const {
  return static_cast< ::google::spanner::admin::database::v1::Database_State >(state_);
}
inline ::google::spanner::admin::database::v1::Database_State Database::state() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.Database.state)
  return _internal_state();
}
inline void Database::_internal_set_state(::google::spanner::admin::database::v1::Database_State value) {
  
  state_ = value;
}
inline void Database::set_state(::google::spanner::admin::database::v1::Database_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.Database.state)
}

// -------------------------------------------------------------------

// ListDatabasesRequest

// string parent = 1;
inline void ListDatabasesRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListDatabasesRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.ListDatabasesRequest.parent)
  return _internal_parent();
}
inline void ListDatabasesRequest::set_parent(const std::string& value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.ListDatabasesRequest.parent)
}
inline std::string* ListDatabasesRequest::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.ListDatabasesRequest.parent)
  return _internal_mutable_parent();
}
inline const std::string& ListDatabasesRequest::_internal_parent() const {
  return parent_.GetNoArena();
}
inline void ListDatabasesRequest::_internal_set_parent(const std::string& value) {
  
  parent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListDatabasesRequest::set_parent(std::string&& value) {
  
  parent_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.ListDatabasesRequest.parent)
}
inline void ListDatabasesRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.ListDatabasesRequest.parent)
}
inline void ListDatabasesRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.ListDatabasesRequest.parent)
}
inline std::string* ListDatabasesRequest::_internal_mutable_parent() {
  
  return parent_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListDatabasesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.ListDatabasesRequest.parent)
  
  return parent_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListDatabasesRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.ListDatabasesRequest.parent)
}

// int32 page_size = 3;
inline void ListDatabasesRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDatabasesRequest::_internal_page_size() const {
  return page_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDatabasesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.ListDatabasesRequest.page_size)
  return _internal_page_size();
}
inline void ListDatabasesRequest::_internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_size_ = value;
}
inline void ListDatabasesRequest::set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.ListDatabasesRequest.page_size)
}

// string page_token = 4;
inline void ListDatabasesRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListDatabasesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.ListDatabasesRequest.page_token)
  return _internal_page_token();
}
inline void ListDatabasesRequest::set_page_token(const std::string& value) {
  _internal_set_page_token(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.ListDatabasesRequest.page_token)
}
inline std::string* ListDatabasesRequest::mutable_page_token() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.ListDatabasesRequest.page_token)
  return _internal_mutable_page_token();
}
inline const std::string& ListDatabasesRequest::_internal_page_token() const {
  return page_token_.GetNoArena();
}
inline void ListDatabasesRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListDatabasesRequest::set_page_token(std::string&& value) {
  
  page_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.ListDatabasesRequest.page_token)
}
inline void ListDatabasesRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  page_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.ListDatabasesRequest.page_token)
}
inline void ListDatabasesRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.ListDatabasesRequest.page_token)
}
inline std::string* ListDatabasesRequest::_internal_mutable_page_token() {
  
  return page_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListDatabasesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.ListDatabasesRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListDatabasesRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.ListDatabasesRequest.page_token)
}

// -------------------------------------------------------------------

// ListDatabasesResponse

// repeated .google.spanner.admin.database.v1.Database databases = 1;
inline int ListDatabasesResponse::_internal_databases_size() const {
  return databases_.size();
}
inline int ListDatabasesResponse::databases_size() const {
  return _internal_databases_size();
}
inline void ListDatabasesResponse::clear_databases() {
  databases_.Clear();
}
inline ::google::spanner::admin::database::v1::Database* ListDatabasesResponse::mutable_databases(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.ListDatabasesResponse.databases)
  return databases_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::admin::database::v1::Database >*
ListDatabasesResponse::mutable_databases() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.admin.database.v1.ListDatabasesResponse.databases)
  return &databases_;
}
inline const ::google::spanner::admin::database::v1::Database& ListDatabasesResponse::_internal_databases(int index) const {
  return databases_.Get(index);
}
inline const ::google::spanner::admin::database::v1::Database& ListDatabasesResponse::databases(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.ListDatabasesResponse.databases)
  return _internal_databases(index);
}
inline ::google::spanner::admin::database::v1::Database* ListDatabasesResponse::_internal_add_databases() {
  return databases_.Add();
}
inline ::google::spanner::admin::database::v1::Database* ListDatabasesResponse::add_databases() {
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.ListDatabasesResponse.databases)
  return _internal_add_databases();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::admin::database::v1::Database >&
ListDatabasesResponse::databases() const {
  // @@protoc_insertion_point(field_list:google.spanner.admin.database.v1.ListDatabasesResponse.databases)
  return databases_;
}

// string next_page_token = 2;
inline void ListDatabasesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListDatabasesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.ListDatabasesResponse.next_page_token)
  return _internal_next_page_token();
}
inline void ListDatabasesResponse::set_next_page_token(const std::string& value) {
  _internal_set_next_page_token(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.ListDatabasesResponse.next_page_token)
}
inline std::string* ListDatabasesResponse::mutable_next_page_token() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.ListDatabasesResponse.next_page_token)
  return _internal_mutable_next_page_token();
}
inline const std::string& ListDatabasesResponse::_internal_next_page_token() const {
  return next_page_token_.GetNoArena();
}
inline void ListDatabasesResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListDatabasesResponse::set_next_page_token(std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.ListDatabasesResponse.next_page_token)
}
inline void ListDatabasesResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_page_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.ListDatabasesResponse.next_page_token)
}
inline void ListDatabasesResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.ListDatabasesResponse.next_page_token)
}
inline std::string* ListDatabasesResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListDatabasesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.ListDatabasesResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListDatabasesResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.ListDatabasesResponse.next_page_token)
}

// -------------------------------------------------------------------

// CreateDatabaseRequest

// string parent = 1;
inline void CreateDatabaseRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateDatabaseRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.CreateDatabaseRequest.parent)
  return _internal_parent();
}
inline void CreateDatabaseRequest::set_parent(const std::string& value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.CreateDatabaseRequest.parent)
}
inline std::string* CreateDatabaseRequest::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.CreateDatabaseRequest.parent)
  return _internal_mutable_parent();
}
inline const std::string& CreateDatabaseRequest::_internal_parent() const {
  return parent_.GetNoArena();
}
inline void CreateDatabaseRequest::_internal_set_parent(const std::string& value) {
  
  parent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateDatabaseRequest::set_parent(std::string&& value) {
  
  parent_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.CreateDatabaseRequest.parent)
}
inline void CreateDatabaseRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.CreateDatabaseRequest.parent)
}
inline void CreateDatabaseRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.CreateDatabaseRequest.parent)
}
inline std::string* CreateDatabaseRequest::_internal_mutable_parent() {
  
  return parent_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateDatabaseRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.CreateDatabaseRequest.parent)
  
  return parent_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateDatabaseRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.CreateDatabaseRequest.parent)
}

// string create_statement = 2;
inline void CreateDatabaseRequest::clear_create_statement() {
  create_statement_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateDatabaseRequest::create_statement() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.CreateDatabaseRequest.create_statement)
  return _internal_create_statement();
}
inline void CreateDatabaseRequest::set_create_statement(const std::string& value) {
  _internal_set_create_statement(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.CreateDatabaseRequest.create_statement)
}
inline std::string* CreateDatabaseRequest::mutable_create_statement() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.CreateDatabaseRequest.create_statement)
  return _internal_mutable_create_statement();
}
inline const std::string& CreateDatabaseRequest::_internal_create_statement() const {
  return create_statement_.GetNoArena();
}
inline void CreateDatabaseRequest::_internal_set_create_statement(const std::string& value) {
  
  create_statement_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateDatabaseRequest::set_create_statement(std::string&& value) {
  
  create_statement_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.CreateDatabaseRequest.create_statement)
}
inline void CreateDatabaseRequest::set_create_statement(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  create_statement_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.CreateDatabaseRequest.create_statement)
}
inline void CreateDatabaseRequest::set_create_statement(const char* value, size_t size) {
  
  create_statement_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.CreateDatabaseRequest.create_statement)
}
inline std::string* CreateDatabaseRequest::_internal_mutable_create_statement() {
  
  return create_statement_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateDatabaseRequest::release_create_statement() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.CreateDatabaseRequest.create_statement)
  
  return create_statement_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateDatabaseRequest::set_allocated_create_statement(std::string* create_statement) {
  if (create_statement != nullptr) {
    
  } else {
    
  }
  create_statement_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), create_statement);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.CreateDatabaseRequest.create_statement)
}

// repeated string extra_statements = 3;
inline int CreateDatabaseRequest::_internal_extra_statements_size() const {
  return extra_statements_.size();
}
inline int CreateDatabaseRequest::extra_statements_size() const {
  return _internal_extra_statements_size();
}
inline void CreateDatabaseRequest::clear_extra_statements() {
  extra_statements_.Clear();
}
inline std::string* CreateDatabaseRequest::add_extra_statements() {
  // @@protoc_insertion_point(field_add_mutable:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
  return _internal_add_extra_statements();
}
inline const std::string& CreateDatabaseRequest::_internal_extra_statements(int index) const {
  return extra_statements_.Get(index);
}
inline const std::string& CreateDatabaseRequest::extra_statements(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
  return _internal_extra_statements(index);
}
inline std::string* CreateDatabaseRequest::mutable_extra_statements(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
  return extra_statements_.Mutable(index);
}
inline void CreateDatabaseRequest::set_extra_statements(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
  extra_statements_.Mutable(index)->assign(value);
}
inline void CreateDatabaseRequest::set_extra_statements(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
  extra_statements_.Mutable(index)->assign(std::move(value));
}
inline void CreateDatabaseRequest::set_extra_statements(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  extra_statements_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
}
inline void CreateDatabaseRequest::set_extra_statements(int index, const char* value, size_t size) {
  extra_statements_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
}
inline std::string* CreateDatabaseRequest::_internal_add_extra_statements() {
  return extra_statements_.Add();
}
inline void CreateDatabaseRequest::add_extra_statements(const std::string& value) {
  extra_statements_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
}
inline void CreateDatabaseRequest::add_extra_statements(std::string&& value) {
  extra_statements_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
}
inline void CreateDatabaseRequest::add_extra_statements(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  extra_statements_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
}
inline void CreateDatabaseRequest::add_extra_statements(const char* value, size_t size) {
  extra_statements_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateDatabaseRequest::extra_statements() const {
  // @@protoc_insertion_point(field_list:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
  return extra_statements_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateDatabaseRequest::mutable_extra_statements() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
  return &extra_statements_;
}

// -------------------------------------------------------------------

// CreateDatabaseMetadata

// string database = 1;
inline void CreateDatabaseMetadata::clear_database() {
  database_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateDatabaseMetadata::database() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.CreateDatabaseMetadata.database)
  return _internal_database();
}
inline void CreateDatabaseMetadata::set_database(const std::string& value) {
  _internal_set_database(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.CreateDatabaseMetadata.database)
}
inline std::string* CreateDatabaseMetadata::mutable_database() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.CreateDatabaseMetadata.database)
  return _internal_mutable_database();
}
inline const std::string& CreateDatabaseMetadata::_internal_database() const {
  return database_.GetNoArena();
}
inline void CreateDatabaseMetadata::_internal_set_database(const std::string& value) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateDatabaseMetadata::set_database(std::string&& value) {
  
  database_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.CreateDatabaseMetadata.database)
}
inline void CreateDatabaseMetadata::set_database(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.CreateDatabaseMetadata.database)
}
inline void CreateDatabaseMetadata::set_database(const char* value, size_t size) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.CreateDatabaseMetadata.database)
}
inline std::string* CreateDatabaseMetadata::_internal_mutable_database() {
  
  return database_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateDatabaseMetadata::release_database() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.CreateDatabaseMetadata.database)
  
  return database_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateDatabaseMetadata::set_allocated_database(std::string* database) {
  if (database != nullptr) {
    
  } else {
    
  }
  database_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.CreateDatabaseMetadata.database)
}

// -------------------------------------------------------------------

// GetDatabaseRequest

// string name = 1;
inline void GetDatabaseRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetDatabaseRequest::name() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.GetDatabaseRequest.name)
  return _internal_name();
}
inline void GetDatabaseRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.GetDatabaseRequest.name)
}
inline std::string* GetDatabaseRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.GetDatabaseRequest.name)
  return _internal_mutable_name();
}
inline const std::string& GetDatabaseRequest::_internal_name() const {
  return name_.GetNoArena();
}
inline void GetDatabaseRequest::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetDatabaseRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.GetDatabaseRequest.name)
}
inline void GetDatabaseRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.GetDatabaseRequest.name)
}
inline void GetDatabaseRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.GetDatabaseRequest.name)
}
inline std::string* GetDatabaseRequest::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetDatabaseRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.GetDatabaseRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetDatabaseRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.GetDatabaseRequest.name)
}

// -------------------------------------------------------------------

// UpdateDatabaseDdlRequest

// string database = 1;
inline void UpdateDatabaseDdlRequest::clear_database() {
  database_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdateDatabaseDdlRequest::database() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.database)
  return _internal_database();
}
inline void UpdateDatabaseDdlRequest::set_database(const std::string& value) {
  _internal_set_database(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.database)
}
inline std::string* UpdateDatabaseDdlRequest::mutable_database() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.database)
  return _internal_mutable_database();
}
inline const std::string& UpdateDatabaseDdlRequest::_internal_database() const {
  return database_.GetNoArena();
}
inline void UpdateDatabaseDdlRequest::_internal_set_database(const std::string& value) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpdateDatabaseDdlRequest::set_database(std::string&& value) {
  
  database_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.database)
}
inline void UpdateDatabaseDdlRequest::set_database(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.database)
}
inline void UpdateDatabaseDdlRequest::set_database(const char* value, size_t size) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.database)
}
inline std::string* UpdateDatabaseDdlRequest::_internal_mutable_database() {
  
  return database_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateDatabaseDdlRequest::release_database() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.database)
  
  return database_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateDatabaseDdlRequest::set_allocated_database(std::string* database) {
  if (database != nullptr) {
    
  } else {
    
  }
  database_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.database)
}

// repeated string statements = 2;
inline int UpdateDatabaseDdlRequest::_internal_statements_size() const {
  return statements_.size();
}
inline int UpdateDatabaseDdlRequest::statements_size() const {
  return _internal_statements_size();
}
inline void UpdateDatabaseDdlRequest::clear_statements() {
  statements_.Clear();
}
inline std::string* UpdateDatabaseDdlRequest::add_statements() {
  // @@protoc_insertion_point(field_add_mutable:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
  return _internal_add_statements();
}
inline const std::string& UpdateDatabaseDdlRequest::_internal_statements(int index) const {
  return statements_.Get(index);
}
inline const std::string& UpdateDatabaseDdlRequest::statements(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
  return _internal_statements(index);
}
inline std::string* UpdateDatabaseDdlRequest::mutable_statements(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
  return statements_.Mutable(index);
}
inline void UpdateDatabaseDdlRequest::set_statements(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
  statements_.Mutable(index)->assign(value);
}
inline void UpdateDatabaseDdlRequest::set_statements(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
  statements_.Mutable(index)->assign(std::move(value));
}
inline void UpdateDatabaseDdlRequest::set_statements(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  statements_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
}
inline void UpdateDatabaseDdlRequest::set_statements(int index, const char* value, size_t size) {
  statements_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
}
inline std::string* UpdateDatabaseDdlRequest::_internal_add_statements() {
  return statements_.Add();
}
inline void UpdateDatabaseDdlRequest::add_statements(const std::string& value) {
  statements_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
}
inline void UpdateDatabaseDdlRequest::add_statements(std::string&& value) {
  statements_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
}
inline void UpdateDatabaseDdlRequest::add_statements(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  statements_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
}
inline void UpdateDatabaseDdlRequest::add_statements(const char* value, size_t size) {
  statements_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UpdateDatabaseDdlRequest::statements() const {
  // @@protoc_insertion_point(field_list:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
  return statements_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UpdateDatabaseDdlRequest::mutable_statements() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
  return &statements_;
}

// string operation_id = 3;
inline void UpdateDatabaseDdlRequest::clear_operation_id() {
  operation_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdateDatabaseDdlRequest::operation_id() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.operation_id)
  return _internal_operation_id();
}
inline void UpdateDatabaseDdlRequest::set_operation_id(const std::string& value) {
  _internal_set_operation_id(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.operation_id)
}
inline std::string* UpdateDatabaseDdlRequest::mutable_operation_id() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.operation_id)
  return _internal_mutable_operation_id();
}
inline const std::string& UpdateDatabaseDdlRequest::_internal_operation_id() const {
  return operation_id_.GetNoArena();
}
inline void UpdateDatabaseDdlRequest::_internal_set_operation_id(const std::string& value) {
  
  operation_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpdateDatabaseDdlRequest::set_operation_id(std::string&& value) {
  
  operation_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.operation_id)
}
inline void UpdateDatabaseDdlRequest::set_operation_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  operation_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.operation_id)
}
inline void UpdateDatabaseDdlRequest::set_operation_id(const char* value, size_t size) {
  
  operation_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.operation_id)
}
inline std::string* UpdateDatabaseDdlRequest::_internal_mutable_operation_id() {
  
  return operation_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateDatabaseDdlRequest::release_operation_id() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.operation_id)
  
  return operation_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateDatabaseDdlRequest::set_allocated_operation_id(std::string* operation_id) {
  if (operation_id != nullptr) {
    
  } else {
    
  }
  operation_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operation_id);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.operation_id)
}

// -------------------------------------------------------------------

// UpdateDatabaseDdlMetadata

// string database = 1;
inline void UpdateDatabaseDdlMetadata::clear_database() {
  database_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdateDatabaseDdlMetadata::database() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.database)
  return _internal_database();
}
inline void UpdateDatabaseDdlMetadata::set_database(const std::string& value) {
  _internal_set_database(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.database)
}
inline std::string* UpdateDatabaseDdlMetadata::mutable_database() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.database)
  return _internal_mutable_database();
}
inline const std::string& UpdateDatabaseDdlMetadata::_internal_database() const {
  return database_.GetNoArena();
}
inline void UpdateDatabaseDdlMetadata::_internal_set_database(const std::string& value) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpdateDatabaseDdlMetadata::set_database(std::string&& value) {
  
  database_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.database)
}
inline void UpdateDatabaseDdlMetadata::set_database(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.database)
}
inline void UpdateDatabaseDdlMetadata::set_database(const char* value, size_t size) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.database)
}
inline std::string* UpdateDatabaseDdlMetadata::_internal_mutable_database() {
  
  return database_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateDatabaseDdlMetadata::release_database() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.database)
  
  return database_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateDatabaseDdlMetadata::set_allocated_database(std::string* database) {
  if (database != nullptr) {
    
  } else {
    
  }
  database_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.database)
}

// repeated string statements = 2;
inline int UpdateDatabaseDdlMetadata::_internal_statements_size() const {
  return statements_.size();
}
inline int UpdateDatabaseDdlMetadata::statements_size() const {
  return _internal_statements_size();
}
inline void UpdateDatabaseDdlMetadata::clear_statements() {
  statements_.Clear();
}
inline std::string* UpdateDatabaseDdlMetadata::add_statements() {
  // @@protoc_insertion_point(field_add_mutable:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
  return _internal_add_statements();
}
inline const std::string& UpdateDatabaseDdlMetadata::_internal_statements(int index) const {
  return statements_.Get(index);
}
inline const std::string& UpdateDatabaseDdlMetadata::statements(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
  return _internal_statements(index);
}
inline std::string* UpdateDatabaseDdlMetadata::mutable_statements(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
  return statements_.Mutable(index);
}
inline void UpdateDatabaseDdlMetadata::set_statements(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
  statements_.Mutable(index)->assign(value);
}
inline void UpdateDatabaseDdlMetadata::set_statements(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
  statements_.Mutable(index)->assign(std::move(value));
}
inline void UpdateDatabaseDdlMetadata::set_statements(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  statements_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
}
inline void UpdateDatabaseDdlMetadata::set_statements(int index, const char* value, size_t size) {
  statements_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
}
inline std::string* UpdateDatabaseDdlMetadata::_internal_add_statements() {
  return statements_.Add();
}
inline void UpdateDatabaseDdlMetadata::add_statements(const std::string& value) {
  statements_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
}
inline void UpdateDatabaseDdlMetadata::add_statements(std::string&& value) {
  statements_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
}
inline void UpdateDatabaseDdlMetadata::add_statements(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  statements_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
}
inline void UpdateDatabaseDdlMetadata::add_statements(const char* value, size_t size) {
  statements_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UpdateDatabaseDdlMetadata::statements() const {
  // @@protoc_insertion_point(field_list:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
  return statements_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UpdateDatabaseDdlMetadata::mutable_statements() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
  return &statements_;
}

// repeated .google.protobuf.Timestamp commit_timestamps = 3;
inline int UpdateDatabaseDdlMetadata::_internal_commit_timestamps_size() const {
  return commit_timestamps_.size();
}
inline int UpdateDatabaseDdlMetadata::commit_timestamps_size() const {
  return _internal_commit_timestamps_size();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* UpdateDatabaseDdlMetadata::mutable_commit_timestamps(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.commit_timestamps)
  return commit_timestamps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Timestamp >*
UpdateDatabaseDdlMetadata::mutable_commit_timestamps() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.commit_timestamps)
  return &commit_timestamps_;
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& UpdateDatabaseDdlMetadata::_internal_commit_timestamps(int index) const {
  return commit_timestamps_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& UpdateDatabaseDdlMetadata::commit_timestamps(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.commit_timestamps)
  return _internal_commit_timestamps(index);
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* UpdateDatabaseDdlMetadata::_internal_add_commit_timestamps() {
  return commit_timestamps_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* UpdateDatabaseDdlMetadata::add_commit_timestamps() {
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.commit_timestamps)
  return _internal_add_commit_timestamps();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Timestamp >&
UpdateDatabaseDdlMetadata::commit_timestamps() const {
  // @@protoc_insertion_point(field_list:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.commit_timestamps)
  return commit_timestamps_;
}

// -------------------------------------------------------------------

// DropDatabaseRequest

// string database = 1;
inline void DropDatabaseRequest::clear_database() {
  database_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DropDatabaseRequest::database() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.DropDatabaseRequest.database)
  return _internal_database();
}
inline void DropDatabaseRequest::set_database(const std::string& value) {
  _internal_set_database(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.DropDatabaseRequest.database)
}
inline std::string* DropDatabaseRequest::mutable_database() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.DropDatabaseRequest.database)
  return _internal_mutable_database();
}
inline const std::string& DropDatabaseRequest::_internal_database() const {
  return database_.GetNoArena();
}
inline void DropDatabaseRequest::_internal_set_database(const std::string& value) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DropDatabaseRequest::set_database(std::string&& value) {
  
  database_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.DropDatabaseRequest.database)
}
inline void DropDatabaseRequest::set_database(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.DropDatabaseRequest.database)
}
inline void DropDatabaseRequest::set_database(const char* value, size_t size) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.DropDatabaseRequest.database)
}
inline std::string* DropDatabaseRequest::_internal_mutable_database() {
  
  return database_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DropDatabaseRequest::release_database() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.DropDatabaseRequest.database)
  
  return database_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DropDatabaseRequest::set_allocated_database(std::string* database) {
  if (database != nullptr) {
    
  } else {
    
  }
  database_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.DropDatabaseRequest.database)
}

// -------------------------------------------------------------------

// GetDatabaseDdlRequest

// string database = 1;
inline void GetDatabaseDdlRequest::clear_database() {
  database_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetDatabaseDdlRequest::database() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.GetDatabaseDdlRequest.database)
  return _internal_database();
}
inline void GetDatabaseDdlRequest::set_database(const std::string& value) {
  _internal_set_database(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.GetDatabaseDdlRequest.database)
}
inline std::string* GetDatabaseDdlRequest::mutable_database() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.GetDatabaseDdlRequest.database)
  return _internal_mutable_database();
}
inline const std::string& GetDatabaseDdlRequest::_internal_database() const {
  return database_.GetNoArena();
}
inline void GetDatabaseDdlRequest::_internal_set_database(const std::string& value) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetDatabaseDdlRequest::set_database(std::string&& value) {
  
  database_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.GetDatabaseDdlRequest.database)
}
inline void GetDatabaseDdlRequest::set_database(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.GetDatabaseDdlRequest.database)
}
inline void GetDatabaseDdlRequest::set_database(const char* value, size_t size) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.GetDatabaseDdlRequest.database)
}
inline std::string* GetDatabaseDdlRequest::_internal_mutable_database() {
  
  return database_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetDatabaseDdlRequest::release_database() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.GetDatabaseDdlRequest.database)
  
  return database_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetDatabaseDdlRequest::set_allocated_database(std::string* database) {
  if (database != nullptr) {
    
  } else {
    
  }
  database_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.GetDatabaseDdlRequest.database)
}

// -------------------------------------------------------------------

// GetDatabaseDdlResponse

// repeated string statements = 1;
inline int GetDatabaseDdlResponse::_internal_statements_size() const {
  return statements_.size();
}
inline int GetDatabaseDdlResponse::statements_size() const {
  return _internal_statements_size();
}
inline void GetDatabaseDdlResponse::clear_statements() {
  statements_.Clear();
}
inline std::string* GetDatabaseDdlResponse::add_statements() {
  // @@protoc_insertion_point(field_add_mutable:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
  return _internal_add_statements();
}
inline const std::string& GetDatabaseDdlResponse::_internal_statements(int index) const {
  return statements_.Get(index);
}
inline const std::string& GetDatabaseDdlResponse::statements(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
  return _internal_statements(index);
}
inline std::string* GetDatabaseDdlResponse::mutable_statements(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
  return statements_.Mutable(index);
}
inline void GetDatabaseDdlResponse::set_statements(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
  statements_.Mutable(index)->assign(value);
}
inline void GetDatabaseDdlResponse::set_statements(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
  statements_.Mutable(index)->assign(std::move(value));
}
inline void GetDatabaseDdlResponse::set_statements(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  statements_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
}
inline void GetDatabaseDdlResponse::set_statements(int index, const char* value, size_t size) {
  statements_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
}
inline std::string* GetDatabaseDdlResponse::_internal_add_statements() {
  return statements_.Add();
}
inline void GetDatabaseDdlResponse::add_statements(const std::string& value) {
  statements_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
}
inline void GetDatabaseDdlResponse::add_statements(std::string&& value) {
  statements_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
}
inline void GetDatabaseDdlResponse::add_statements(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  statements_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
}
inline void GetDatabaseDdlResponse::add_statements(const char* value, size_t size) {
  statements_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetDatabaseDdlResponse::statements() const {
  // @@protoc_insertion_point(field_list:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
  return statements_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetDatabaseDdlResponse::mutable_statements() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
  return &statements_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace database
}  // namespace admin
}  // namespace spanner
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::spanner::admin::database::v1::Database_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::spanner::admin::database::v1::Database_State>() {
  return ::google::spanner::admin::database::v1::Database_State_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto
